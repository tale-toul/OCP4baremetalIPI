---
- name: Local tasks
  hosts: 127.0.0.1
  connection: local
  become: no
  tasks:
    - name: Remove stale entries from known_hosts file in the ansible host
      command: ssh-keygen -R {{ item }}
      with_items: "{{ groups['support'] }}"
    - name: Save terraform variables to a file
      shell: terraform output |tr '=' ':' > ../../Ansible/group_vars/all/support_terraform_outputs.var
      args:
        chdir: ../Terraform/libvirt/
    - name: Load terraform output variables
      include_vars:
        dir: group_vars/all
        extensions:
          - 'data'
          - 'var'
    - name: Update support group in inventory file
      blockinfile:
        path: inventory
        block: "{{ support_host_ip | regex_search('[^/]+') }}"
        marker: "# {mark} Ansible block for support"
        insertafter: "^\\[support\\]$"
    - name: Update support vars in inventory file
      blockinfile:
        path: inventory
        marker: "# {mark} Ansible block for support variables"
        insertafter: "^\\[support:vars\\]$"
        block: |
           ansible_ssh_common_args='-o ProxyJump="ec2-user@{{ baremetal_public_ip }}"' 
    - name: Reload inventory
      meta: refresh_inventory

- name: Set up support VM
  hosts: support
  gather_facts: no
  tasks:
    # It seems that using include_vars will limit the variable files to those explicitly mentioned here
    - name: Load terraform output variables
      include_vars:
        dir: group_vars/all
        extensions:
          - 'data'
          - 'var'
    - name: Subscribe with Red Hat
      redhat_subscription:
        state: present
        activationkey: "{{ subscription_activationkey }}"
        org_id: "{{ subscription_org_id }}"
    - name: Install required packages
      dnf:
        name:
          - bind
          - bind-utils
          - dhcp-server
        state: present

    - name: Copy DNS and DHCP configuration files
      synchronize:
        src: ../support-files/etc/
        dest: /etc
        use_ssh_args: yes
        owner: no
        group: no
    - name: Copy DNS zone files
      synchronize:
        src: ../support-files/var/
        dest: /var
        use_ssh_args: yes
        owner: no
        group: no
    - name: Get list of copied zones files
      local_action: command ls -1 ../support-files/var/named
      register: _zone_files
      become: no
    - name: Change ownership of zone files
      file:
        path: /var/named/{{ item }}
        owner: named
        group: named
      loop: "{{ _zone_files.stdout_lines }}"
    - name: Enable and start DNS and DHCP services
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - named
        - dhcpd
    - name: Update OS
      dnf:
        name: "*"
        state: latest
      register: _os_update
    - pause:
        prompt: "Operating System has been updated.  Reboot the host? (yes|no) [Reboot may take between 10 and 20 minutes to complete]"
        echo: true
      register: _reboot
      when: _os_update.changed == True
    - name: Reboot if OS updated
      reboot:
        reboot_timeout: 600
      when: _reboot.user_input is defined and _reboot.user_input == "yes"

- name: Set up VBMC
  hosts: baremetal
  gather_facts: no
  tasks:
    # It seems that using include_vars will limit the variable files to those explicitly mentioned here
    - name: Load terraform output variables
      include_vars:
        dir: group_vars/all
        extensions:
          - 'data'
          - 'var'
    - name: Install Virtual BMC
      pip:
        name: virtualbmc
    - name: Copy Virtual BMC systemd unit
      copy:
        src: vbmc/vbmcd.service
        dest: /etc/systemd/system/vbmcd.service
        owner: root
        group: root
        mode: '0644'
    - name: Enable and start Virtual BMC service
      systemd:
        daemon_reload: yes
        name: vbmcd
        enabled: yes
        state: started
    - name: Create directories for VBMC host config files
      file:
        path: /root/.vbmc/{{ item }}
        state: directory
      loop: "{{ master_names + worker_names }}"
    - name: Create vbmc config files for OCP nodes
      template:
        src: vbmc/managed_host.j2
        dest: /root/.vbmc/{{ item }}/config
      loop: "{{ master_names + worker_names }}"
      loop_control:
        index_var: x
    - name: Allow access to vbmc VMs ports in firewall
      firewalld:
        port: 700{{ x }}/udp
        zone: libvirt
        permanent: yes
        immediate: yes
        state: enabled
      loop: "{{ master_names + worker_names }}"
      loop_control:
        index_var: x
    - name: Enable access to the KVM Virtual Machines VNC displays
      firewalld:
        port: 590{{ x }}/tcp
        zone: public
        permanent: yes
        immediate: yes
        state: enabled
      loop: "{{ master_names + worker_names }}"
      loop_control:
        index_var: x

- name: Set up provision VM
  hosts: provision
  gather_facts: no
  tasks:
    # It seems that using include_vars will limit the variable files to those explicitly mentioned here
    - name: Load terraform output variables
      include_vars:
        dir: group_vars/all
        extensions:
          - 'data'
          - 'var'
    - name: Subscribe with Red Hat
      redhat_subscription:
        state: present
        activationkey: "{{ subscription_activationkey }}"
        org_id: "{{ subscription_org_id }}"
    - name: Install required packages
      dnf:
        name:
          - '@virtualization-host-environment'
          - mkisofs
          - python3-devel
          - jq
          - ipmitool
        state: present
    - name: Add the user kni
      user:
        name: kni
        groups: libvirt
    - name: Authorize an ssh key for kni user
      authorized_key:
        user: kni
        state: present
        key: "{{ lookup('file', '../Terraform/'+ssh_certificate)  }}"
    - name: Add sudo privileges to kni
      lineinfile:
        path: /etc/sudoers.d/kni
        line: kni ALL=(root) NOPASSWD:ALL
        create: yes
        mode: 0440
    - name: Enable and start firewalld and libvirtd services
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - firewalld
        - libvirtd
    - name: Enable http service in firewall
      firewalld:
        service: http
        zone: public
        permanent: yes
        immediate: yes
        state: enabled
    - name: Update OS
      dnf:
        name: "*"
        state: latest
      register: _os_update
    - pause:
        prompt: "Operating System has been updated.  Reboot the host? (yes|no) [Reboot may take between 10 and 20 minutes to complete]"
        echo: true
      register: _reboot
      when: _os_update.changed == True
    - name: Reboot if OS updated
      reboot:
        reboot_timeout: 600
      when: _reboot.user_input is defined and _reboot.user_input == "yes"
