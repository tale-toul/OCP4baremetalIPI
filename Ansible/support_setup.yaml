---
- name: Local tasks
  hosts: 127.0.0.1
  connection: local
  become: no
  tasks:
    - name: Remove stale entries from known_hosts file in the ansible host
      command: ssh-keygen -R {{ item }}
      loop:
        - "{{ groups['support'] | first }}"
        - "{{ groups['provision'] | first }}"
    - name: Save terraform variables to a file
      shell: terraform output |tr '=' ':' > ../../Ansible/group_vars/all/support_terraform_outputs.var
      args:
        chdir: ../Terraform/libvirt/
    - name: Load terraform output variables
      include_vars:
        dir: group_vars/all
        extensions:
          - 'data'
          - 'var'
        ignore_unknown_extensions: yes
    - name: Update support and provision groups in inventory file
      blockinfile:
        path: inventory
        marker: "# {mark} Ansible block for support and provision"
        insertafter: "^\\[support\\]$"
        block: |
          {{ support_host_ip }}

          [provision]
          {{ provision_host_ip }}
    - name: Update support vars in inventory file
      blockinfile:
        path: inventory
        marker: "# {mark} Ansible block for support variables"
        insertafter: "^\\[kvm:vars\\]$"
        block: |
           ansible_ssh_common_args='-o ProxyJump="ec2-user@{{ baremetal_public_ip }}"' 
    - name: Reload inventory
      meta: refresh_inventory

- name: Set up support VM
  hosts: support
  gather_facts: no
  tasks:
    - name: Load terraform output variables
      include_vars:
        dir: group_vars/all
        extensions:
          - 'data'
          - 'var'
        ignore_unknown_extensions: yes
    - name: Wait for support VM connection to become available
      wait_for_connection:
        timeout: 300
    - name: Assing a FQDN name to the support VM
      hostname:
          name: "support.{{ dns_zone }}"
    - name: Subscribe support VM with Red Hat
      redhat_subscription:
        state: present
        activationkey: "{{ subscription_activationkey }}"
        org_id: "{{ subscription_org_id }}"
    - name: Set up DNS and DHCP services
      include_role:
        name: setup_support_services

#Set up virtual BMC or Red Fish
- name: Set up VBMC or Red Fish
  hosts: baremetal
  gather_facts: no
  tasks:
    - name: Load terraform output variables
      include_vars:
        dir: group_vars/all
        extensions:
          - 'data'
          - 'var'
        ignore_unknown_extensions: yes
    - name: Generate random password for managed system access
      set_fact:
        managed_password: "{{ lookup('password', '/dev/null length=15 chars=ascii_letters') }}"
      no_log: true
    - name: Set up VBMC
      include_tasks: vbmc/setup_vbmc.yaml
      when: architecture == "vbmc"

    - name: Set up sushy tools (redfish)
      include_tasks: redfish/setup_sushy.yaml
      when: architecture == "redfish"

    - name: Enable access to the KVM Virtual Machines VNC displays
      firewalld:
        port: "{{ 5900 + x }}/tcp"
        zone: public
        permanent: yes
        immediate: yes
        state: enabled
      # 3 masters + 2 (support and provisioning) + workers
      loop: "{{ range(0, 3 + 2 + number_of_workers)|list}}"
      loop_control:
        index_var: x

#Set up provision VM
- name: Set up provision VM
  hosts: provision
  gather_facts: no
  tasks:
    - name: Load terraform output variables
      include_vars:
        dir: group_vars/all
        extensions:
          - 'data'
          - 'var'
        ignore_unknown_extensions: yes
    - name: Wait for provision VM connection to become available
      wait_for_connection:
        timeout: 300
    - name: Subscribe provision VM with Red Hat
      redhat_subscription:
        state: present
        activationkey: "{{ subscription_activationkey }}"
        org_id: "{{ subscription_org_id }}"
      retries: 14
      delay: 15
    - name: Add hashicorpt repo for terraform
      get_url:
        url: https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
        dest: /etc/yum.repos.d/hashicorp.repo
        mode: '0644'
    - name: Install required packages in provision VM
      dnf:
        name:
          - '@virtualization-host-environment'
          - mkisofs
          - python3-devel
          - jq
          - ipmitool
          - terraform
        state: present
    - name: Add the user kni
      user:
        name: kni
        groups: libvirt
    - name: Authorize an ssh key for kni user
      authorized_key:
        user: kni
        state: present
        key: "{{ lookup('file', '../Terraform/'+ssh_certificate)  }}"
    - name: Add sudo privileges to kni
      lineinfile:
        path: /etc/sudoers.d/kni
        line: kni ALL=(root) NOPASSWD:ALL
        create: yes
        mode: 0440
    - name: Enable and start firewalld and libvirtd services
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - firewalld
        - libvirtd
    - name: Enable http service in firewall
      firewalld:
        service: http
        zone: public
        permanent: yes
        immediate: yes
        state: enabled
    - name: Copy terraform template to create default storage pool in provisioning VM
      synchronize:
        src: ../Terraform/provision
        dest: .
        use_ssh_args: yes
        owner: no
        group: no
    - name: Create default libvirt storage pool
      terraform:
        project_path: 'provision/'
        state: present
        force_init: yes
    - name: Render install-config template for provisioning based architecture
      template:
        src: vbmc/install-config.j2
        dest: /home/kni/install-config.yaml
        owner: kni
        group: kni
        mode: 0644
      when: architecture == "vbmc"
    - name: Render install-config template for redfish based architecture
      template:
        src: redfish/install-config.j2
        dest: /home/kni/install-config.yaml
        owner: kni
        group: kni
        mode: 0644
      when: architecture == "redfish"
    - name: Create {{ cluster_name }} directory
      file:
        path: /home/kni/{{ cluster_name }}
        state: directory
        owner: kni
        group: kni
        mode: '0750'
    - name: Uncompress oc client file
      unarchive:
        src: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/openshift-client-linux.tar.gz
        dest: /home/kni
        remote_src: yes
    - name: Copy oc client to /usr/local/bin
      copy:
        src: /home/kni/oc
        dest: /usr/local/bin/oc
        mode: 0755
        remote_src: yes
    - name: Create pull secret file
      copy:
        src: pull-secret
        dest: /home/kni
        owner: kni
        group: kni
        mode: 0640
    - name: Get release.txt file for version {{ ocp_version }}
      get_url:
        url: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocp_version }}/release.txt
        dest: /home/kni
        owner: kni
        group: kni
        mode: 0640
    - name: Extract OCP {{ ocp_version }} release image URI
#The default behavior of lookup is to return a string of comma separated values that is why the regular expression looks for a command instead of $ to terminate the capture
#https://docs.ansible.com/ansible/latest/plugins/lookup.html#forcing-lookups-to-return-lists-query-and-wantlist-true
      set_fact:
        release_image: "{{ lookup('url','https://mirror.openshift.com/pub/openshift-v4/clients/ocp/' + ocp_version + '/release.txt') | regex_search('Pull From: (quay.io[^,]+),.*', '\\1') | list | first }}"
    - name: Build the installer dowload command
      lineinfile:
        path: /home/kni/download_installer
        line: oc adm release extract --registry-config pull-secret --command=openshift-baremetal-install --to . {{ release_image }}
        owner: kni
        group: kni
        mode: 0644
        create: yes
    - name: Download Openshift installer
      command: oc adm release extract --registry-config pull-secret --command=openshift-baremetal-install --to . {{ release_image }}
      args:
        chdir: /home/kni
        creates: /home/kni/openshift-baremetal-install

- name: Update and reboot KVM hosts
  hosts: kvm
  gather_facts: no
  tasks:
    - name: Update OS
      dnf:
        name: "*"
        state: latest
      register: _os_update
    - name: Reboot if OS updated
      reboot:
        reboot_timeout: 600
      when: _os_update.changed == True
